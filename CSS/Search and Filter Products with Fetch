<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Product Search & Filter</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            text-align: center;
        }
        #searchBar, #categoryFilter, #sortPrice {
            margin: 10px;
            padding: 8px;
            font-size: 16px;
        }
        #productCount {
            font-weight: bold;
            margin: 10px 0;
        }
        #products {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }
        .product {
            border: 1px solid #ddd;
            padding: 10px;
            text-align: center;
        }
        .product img {
            max-width: 100px;
            height: auto;
        }
    </style>
</head>
<body>

    <h2>Advanced Product Search & Filter</h2>
    <input type="text" id="searchBar" placeholder="Search products...">
    <select id="categoryFilter">
        <option value="all">All Categories</option>
    </select>
    <select id="sortPrice">
        <option value="default">Sort by Price</option>
        <option value="asc">Low to High</option>
        <option value="desc">High to Low</option>
    </select>

    <p id="productCount"></p>
    <div id="products"></div>

    <script>
        const productsContainer = document.getElementById("products");
        const searchBar = document.getElementById("searchBar");
        const categoryFilter = document.getElementById("categoryFilter");
        const sortPrice = document.getElementById("sortPrice");
        const productCount = document.getElementById("productCount");

        let allProducts = [];

        // Fetch all products
        async function fetchProducts() {
            try {
                let response = await fetch("https://fakestoreapi.com/products");
                allProducts = await response.json();
                displayProducts(allProducts);
            } catch (error) {
                productsContainer.innerHTML = "<p>Failed to fetch products. Please try again later.</p>";
            }
        }

        // Fetch product categories dynamically
        async function fetchCategories() {
            try {
                let response = await fetch("https://fakestoreapi.com/products/categories");
                let categories = await response.json();
                categories.forEach(category => {
                    let option = document.createElement("option");
                    option.value = category;
                    option.textContent = category.charAt(0).toUpperCase() + category.slice(1);
                    categoryFilter.appendChild(option);
                });
            } catch (error) {
                console.error("Failed to fetch categories.");
            }
        }

        // Display products dynamically
        function displayProducts(products) {
            productsContainer.innerHTML = "";
            productCount.textContent = `Showing ${products.length} products`;

            products.forEach(product => {
                let productDiv = document.createElement("div");
                productDiv.classList.add("product");
                productDiv.innerHTML = `
                    <img src="${product.image}" alt="${product.title}">
                    <p><strong>${product.title}</strong></p>
                    <p>$${product.price.toFixed(2)}</p>
                `;
                productsContainer.appendChild(productDiv);
            });
        }

        // Filter products based on search, category, and sorting
        function filterProducts() {
            let filteredProducts = allProducts;

            // Search by title
            let searchQuery = searchBar.value.toLowerCase();
            if (searchQuery) {
                filteredProducts = filteredProducts.filter(product =>
                    product.title.toLowerCase().includes(searchQuery)
                );
            }

            // Filter by category
            let selectedCategory = categoryFilter.value;
            if (selectedCategory !== "all") {
                filteredProducts = filteredProducts.filter(product => product.category === selectedCategory);
            }

            // Sort by price
            let sortValue = sortPrice.value;
            if (sortValue === "asc") {
                filteredProducts.sort((a, b) => a.price - b.price);
            } else if (sortValue === "desc") {
                filteredProducts.sort((a, b) => b.price - a.price);
            }

            displayProducts(filteredProducts);
        }

        // Event listeners
        searchBar.addEventListener("input", filterProducts);
        categoryFilter.addEventListener("change", filterProducts);
        sortPrice.addEventListener("change", filterProducts);

        // Initial Data Fetch
        fetchProducts();
        fetchCategories();
    </script>

</body>
</html>
